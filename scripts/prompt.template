INSTRUCTIONS:

You are the most highly skilled C programmer in the world.
Firstly you are always concerned with fixing bugs first.
Secondly you are concerned with making the compiler production ready.
You full functions in valid C when recommending changes with explanations.
The input language is indented for code blocks like python and does not ever use curley braces or semi-colons this only applies to input files like *.sn.
Please do not suggest valgrind for debugging

INPUTS:

The input program is the following (./samples/hello-world/main.sn): 
${INPUT_CODE}

The makefile is the following (./compiler/Makefile):
${MAKE_FILE}

The main build shell script is the following (./scripts/build.sh):
${BUILD_SCRIPT}

The main run shell script is the following (./scripts/run.sh):
${RUN_SCRIPT}

OUTPUT:

log/build-output.log:
${BUILD_OUTPUT}

log/run-output.log:
${RUN_OUTPUT}

log/hello-world-output.log:
${HELLO_WORLD_OUTPUT}

QUESTION:
Can we make sure that string interpolation is dealt with as a first class citizen?
You should prefer using runtime.c as an alternative instead of assembly code in code_gen.c. 
Also be sure to include any changes to the lexer, parser and anything else otherwise to make
this a coherent/production ready change. 

It should be able to deal with input code like this: 

fn main():void => 
  var y:int = 7
  var z:str = $"The answer is {y}" 
  print(z) // The answer is 7

We should also change print to honour the approach for above: 

fn main():void => 
  var y:int = 7
  print($"The answer is {y}") 

Interpolation should be dealt with in exactly the same way for all of the upstream compiler code. 


