INSTRUCTIONS:
You are the most highly skilled C programmer in the world.
Firstly you are always concerned with fixing bugs first.
Secondly you are concerned with making the compiler production ready.
You give files and full functions in valid C when recommending changes with explanations.
The input language is indented for code blocks like python and does not ever use curley braces or semi-colons this only applies to input files like *.sn.
QUESTION:
How do I fix this given the ouput?
OUTPUT:
gcc -Wall -Wextra -std=c99 -g -D_POSIX_C_SOURCE=200809L   -c -o lexer.o lexer.c
gcc -Wall -Wextra -std=c99 -g -D_POSIX_C_SOURCE=200809L   -c -o ast.o ast.c
ast.c: In function ‘ast_free_expr_preserve_types’:
ast.c:1133:6: warning: enumeration value ‘EXPR_UNARY’ not handled in switch [-Wswitch]
 1133 |      switch (expr->type)
      |      ^~~~~~
ast.c:1133:6: warning: enumeration value ‘EXPR_LITERAL’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_VARIABLE’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_ASSIGN’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_CALL’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_ARRAY’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_ARRAY_ACCESS’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_INCREMENT’ not handled in switch [-Wswitch]
ast.c:1133:6: warning: enumeration value ‘EXPR_DECREMENT’ not handled in switch [-Wswitch]
gcc -Wall -Wextra -std=c99 -g -D_POSIX_C_SOURCE=200809L   -c -o parser.o parser.c
gcc -Wall -Wextra -std=c99 -g -D_POSIX_C_SOURCE=200809L   -c -o code_gen.o code_gen.c
gcc  -o ../bin/sn token.o lexer.o ast.o parser.o symbol_table.o code_gen.o compiler.o debug.o main.o
~/code/ExperimentalCompilerInC
/usr/bin/ld: warning: bin/hello-world.o: missing .note.GNU-stack section implies executable stack
/usr/bin/ld: NOTE: This behaviour is deprecated and will be removed in a future version of the linker
AddressSanitizer:DEADLYSIGNAL
=================================================================
==36829==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x75015a1398b3 bp 0x7ffd3f86ef48 sp 0x7ffd3f86ee78 T0)
==36829==The signal is caused by a READ memory access.
==36829==Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.
    #0 0x75015a1398b3 in __sanitizer::InternalMmapVectorNoCtor<__lsan::LeakedChunk>::Initialize(unsigned long) ../../../../src/libsanitizer/sanitizer_common/sanitizer_common.h:515
    #1 0x75015a1398b3 in __sanitizer::InternalMmapVector<__lsan::LeakedChunk>::InternalMmapVector() ../../../../src/libsanitizer/sanitizer_common/sanitizer_common.h:624
    #2 0x75015a1398b3 in __lsan::CheckForLeaksParam::CheckForLeaksParam() ../../../../src/libsanitizer/lsan/lsan_common.h:242
    #3 0x75015a1398b3 in CheckForLeaks ../../../../src/libsanitizer/lsan/lsan_common.cpp:771
    #4 0x75015a13a06f in CheckForLeaks ../../../../src/libsanitizer/lsan/lsan_common.cpp:765
    #5 0x75015a13a06f in __lsan::DoLeakCheck() ../../../../src/libsanitizer/lsan/lsan_common.cpp:821
    #6 0x750159c47381 in __cxa_finalize stdlib/cxa_finalize.c:82
    #7 0x75015a03b7b6  (/lib/x86_64-linux-gnu/libasan.so.8+0x3b7b6) (BuildId: 23dfa6dbcac57919bae5fe1cac11feecc4fc26c7)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV ../../../../src/libsanitizer/sanitizer_common/sanitizer_common.h:515 in __sanitizer::InternalMmapVectorNoCtor<__lsan::LeakedChunk>::Initialize(unsigned long)
==36829==ABORTING