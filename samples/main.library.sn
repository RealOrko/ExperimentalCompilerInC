fn factorial(n: int): int =>
  print($"factorial: n={n}\n")
  if n <= 1 =>
    print($"factorial: n <= 1 returning 1\n")
    return 1
  var j: int = n * factorial(n - 1)
  print($"factorial: j={j}\n")
  return j

fn is_prime(num: int): bool =>
  if num <= 1 =>
    print($"is_prime: num={num}\n")
    return false
  var i: int = 2
  print($"is_prime: i={i}\n")
  while i * i <= num =>
    if num % i == 0 =>
      print($"is_prime: num % i == 0, returning false\n")
      return false
    i = i + 1
    print($"is_prime: i={i} (after increment)\n")
  return true

fn repeat_string(text: str, count: int): str =>
  var result: str = ""
  for var j: int = 0; j < count; j++ =>
    print($"repeat_string: j={j}\n")
    print($"repeat_string: count={count}\n")
    result = result + text
  return result

fn print_types(num:int, fact:int, sum:int): void => 
  var pi_approx: double = 3.14159
  print($"Pi approx: {pi_approx}\n")

  var ch: char = 'A'
  print($"Char: {ch}\n")

  var flag: bool = true
  print($"Flag: {flag}\n")

  var any: str = $"Str: {num}\n"
  print(any)

  any = $"Fact: {fact}\n"
  print(any)

  any = $"Sum: {sum}\n"
  print(any)

  any = $"Double: {pi_approx}\n"
  print(any)

  any = $"Char: {ch}\n"
  print(any)

  any = $"Bool: {flag}\n"
  print(any)

fn print_void(): void =>
  print("void\n")

fn declare_basic_int_array(): int[] =>
  var int_arr: int[] = {1, 2, 3}

fn print_basic_int_array(arr: int[]): void =>
  print($"Int Array: {arr}")